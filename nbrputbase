 #include <stdio.h>
  1 #include <unistd.h>
  2 #include <stdlib.h>
  3
  4 void    ft_putchar(char c)
  5 {
  6     write(1, &c, 1);
  7 }
  8 int str_len(char *str)
  9 {
 10     int i;
 11
 12     i = 0;
 13     while(*str)
 14     {
 15         str++;
 16         i++;
 17     }
 18     return (i);
 19 }
 20
 21 int valid_base(char *base)
 22 {
 23     char exists[128];
 24     int counter;
 25
 26     counter = 0;
 27     while(counter < 128)
 28     {
 29         exists[counter] = 0;
 30         counter++;
 31     }
 32     counter = 0;
 33     while(*base)
 34     {
 35         if (exists[(int)*base] || *base =='+' || *base =='-')
 36                 return (0);
 37         else
 38                 exists[(int)*base] = 1;
 39         base++;
 40         counter++;
        counter++;
  2     }
  3     if (counter < 2)
  4             return (0);
  5     return (1);
  6 }
  7
  8 void recurse_prt(int nbr, char *base, int base_len)
  9 {
 10     if (nbr < base_len)
 11         ft_putchar(base[nbr]);
 12     else
 13     {
 14         recurse_prt(nbr / base_len, base, base_len);
 15         recurse_prt(nbr % base_len, base, base_len);
 16     }
 17 }
 18
 19 //convert integer to base
 20 void    ft_putnbr_base(int nbr, char *base)
 21 {
 22     int base_len;
 23
 24     base_len = str_len(base);
 25     if (!valid_base(base))
 26         return;
 27     if (nbr == -2147483648)
 28     {
 29         ft_putchar('-');
 30         recurse_prt(2147483648/base_len, base, base_len);
 31         recurse_prt(2147483648%base_len, base, base_len);
 32         return;
 33     }
 34     if (nbr < 0)
 35     {
 36         ft_putchar('-');
 37         nbr = nbr * -1;
 38     }
 39     recurse_prt(nbr, base, base_len);
 40 }
